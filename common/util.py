import re

_gen_header = """\
/*============================================================================
* This file is generated by json-schema during the pre-compilation phase.
* DO NOT modify this file.
  ============================================================================*/
"""

_indent4Str = '    '  # 4 spaces
_indent2Str = '  '  # 2 spaces
_indent1Str = ' '  # 1 spaces
_lineCommentStr = '// '

def writeln(file, line):
    file.write(line + "\n")

def createFile(name):
    f = open(name, 'w')
    writeln(f, _gen_header)
    return f

def indent(text, level, indentSize=4):

    if indentSize == 4:
        indentStr = _indent4Str
    elif indentSize == 2:
        indentStr = _indent2Str
    elif indentSize == 1:
        indentStr = _indent1Str
    else:
        raise Exception('indent size must be either 4, 2, or 1')

    if level == 0 or not text:
        return text
    return (('\n'.join(map(lambda x: (indentStr * level + x).rstrip(), text.splitlines()))) +
            ('\n' if text[-1] == '\n' else ''))

def prefixLines(text, prefix):
    assert isString(text)
    return '\n'.join(map(lambda x: (prefix + x.rstrip()), text.splitlines()))

def lineComment(text):
    return prefixLines(text, _lineCommentStr)

def lineBreak(text, width):
    if not text:
        raise Exception('cannot line-break a falsy text ' + text)

    paragraphs = []
    lines = text.split('\n')
    for l in lines:
        l = l.strip()
        words = l.split(' ')
        splitWords = []
        remain = width
        for w in words:
            wordLen = len(w)
            if wordLen > remain:
                splitWords.append('\n')
                remain = width
            splitWords.append(w)
            remain -= (wordLen + 1)
        brokenLine = ' '.join(splitWords)
        splitLines = brokenLine.split('\n')
        trimmedSplitLines = map(lambda x: x.strip(), splitLines)
        paragraphs.append('\n'.join(trimmedSplitLines))
    return '\n\n'.join(paragraphs)

def checkIfIdIsValid(id):
    if re.match('^[_A-Za-z][_A-Za-z0-9]*$', id) == None:
        raise Exception(id + ' is not a valid identifier')

def isString(val):
    return isinstance(val, str) # or isinstance(val, unicode)


